{"ast":null,"code":"import { environment } from '../../environments/environment.prod';\nimport { HttpParams } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RatingsMoviesService = /*#__PURE__*/(() => {\n  class RatingsMoviesService {\n    constructor(http) {\n      this.http = http;\n      this.url = `${environment.host}/ratingsMovies`;\n    }\n    getAll(filters) {\n      let params = new HttpParams();\n      params = params.append('pageSize', filters.pageSize.toString());\n      params = params.append('pageNumber', filters.pageNumber.toString());\n      params = params.append('movieId', filters.movieId.toString());\n      return this.http.get(`${this.url}`, {\n        params\n      });\n    }\n    insert(data) {\n      return this.http.post(`${this.url}`, data).pipe(map(res => res.data));\n    }\n    update(data) {\n      return this.http.put(`${this.url}/${data.id}`, data).pipe(map(res => res.data));\n    }\n    find(userId, movieId) {\n      return this.http.get(`${this.url}/find?userId=${userId}&movieId=${movieId}`).pipe(map(res => res === null || res === void 0 ? void 0 : res.data), catchError(err => of(undefined)));\n    }\n  }\n  RatingsMoviesService.ɵfac = function RatingsMoviesService_Factory(t) {\n    return new (t || RatingsMoviesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  RatingsMoviesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RatingsMoviesService,\n    factory: RatingsMoviesService.ɵfac,\n    providedIn: 'root'\n  });\n  return RatingsMoviesService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}