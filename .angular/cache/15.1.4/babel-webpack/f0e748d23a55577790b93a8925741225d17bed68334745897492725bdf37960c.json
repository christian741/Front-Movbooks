{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { from } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/storage\";\nexport let AuthInterceptorService = /*#__PURE__*/(() => {\n  class AuthInterceptorService {\n    constructor(storage) {\n      this.storage = storage;\n    }\n    intercept(req, next) {\n      // API´s books and movies\n      if (req.url.includes(environment.tmdbApi) || req.url.includes(environment.googleBooksApi)) {\n        return next.handle(req);\n      }\n      // BlackListedRoutes\n      if (environment.blacklistedRoutes.includes(req.url)) {\n        return next.handle(req);\n      }\n      // convert promise to observable using 'from' operator\n      return from(this.handle(req, next));\n    }\n    handle(req, next) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const token = (yield this.storage.get(environment.tokenName)) || '';\n        const authReq = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        // Important: Note the .toPromise()\n        return next.handle(authReq).toPromise();\n      });\n    }\n  }\n  AuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n    return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.Storage));\n  };\n  AuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptorService,\n    factory: AuthInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}