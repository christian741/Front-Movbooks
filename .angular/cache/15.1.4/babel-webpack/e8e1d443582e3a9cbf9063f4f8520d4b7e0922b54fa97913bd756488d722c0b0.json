{"ast":null,"code":"import { environment } from '../../environments/environment.prod';\nimport { Subject } from 'rxjs';\nimport { HttpParams } from '@angular/common/http';\nimport { catchError, map, retry } from 'rxjs/operators';\nimport { of } from 'rxjs/internal/observable/of';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst paramsUrl = 'language=es&include_image_language=es&api_key=' + environment.tmdbApiKey;\nexport let MoviesService = /*#__PURE__*/(() => {\n  class MoviesService {\n    constructor(http) {\n      this.http = http;\n      this.url = `${environment.host}/movies`;\n      this.dataChanges = new Subject();\n    }\n    getMovies(filters) {\n      let params = new HttpParams();\n      params = params.append('pageSize', filters.pageSize.toString());\n      params = params.append('pageNumber', filters.pageNumber.toString());\n      params = params.append('title', filters.title);\n      params = params.append('aggregated', filters.aggregated.toString());\n      return this.http.get(`${this.url}`, {\n        params\n      });\n    }\n    getMovieDetails(title) {\n      return this.http.get(`${environment.tmdbApi}/search/movie?${paramsUrl}&query=${title}`).pipe(retry(2), map(resp => {\n        if (resp.total_results !== 0) {\n          console.log(resp.results[0]);\n          return resp.results[0];\n        } else {\n          return undefined;\n        }\n      }), catchError(err => undefined));\n    }\n    getMovie(id) {\n      return this.http.get(`${this.url}/${id}`).pipe(catchError(err => of(undefined)),\n      // 401 UnAuthorize\n      map(res => res === null || res === void 0 ? void 0 : res.data));\n    }\n    insertMovie(movie) {\n      return this.http.post(`${this.url}`, movie);\n    }\n    updateMovie(id, movie) {\n      return this.http.put(`${this.url}/${id}`, movie);\n    }\n    deleteMovie(id) {\n      return this.http.delete(`${this.url}/${id}`);\n    }\n    findByTitle(id, title) {\n      return this.http.get(`${this.url}/findByTitle?id=${id || ''}&title=${title}`).pipe(map(res => res.data));\n    }\n  }\n  MoviesService.ɵfac = function MoviesService_Factory(t) {\n    return new (t || MoviesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  MoviesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MoviesService,\n    factory: MoviesService.ɵfac,\n    providedIn: 'root'\n  });\n  return MoviesService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}