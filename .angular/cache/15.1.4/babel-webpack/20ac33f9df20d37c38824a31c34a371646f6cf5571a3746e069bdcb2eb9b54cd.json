{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { HttpParams } from '@angular/common/http';\nimport { of, Subject } from 'rxjs';\nimport { catchError, map, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BooksService = /*#__PURE__*/(() => {\n  class BooksService {\n    constructor(http) {\n      this.http = http;\n      this.url = `${environment.host}/books`;\n      this.dataChanges = new Subject();\n    }\n    getBooks(filter) {\n      let params = new HttpParams();\n      params = params.append('pageSize', filter.pageSize.toString());\n      params = params.append('pageNumber', filter.pageNumber.toString());\n      params = params.append('title', filter.title || '');\n      params = params.append('aggregated', filter.aggregated.toString());\n      return this.http.get(`${this.url}`, {\n        params\n      });\n    }\n    getBookDetails(title) {\n      return this.http.get(`${environment.googleBooksApi}/volumes?q=${title}`).pipe(retry(2), map(results => {\n        if (results.totalItems !== 0) {\n          return results.items[0];\n        }\n        return undefined;\n      }), catchError(err => undefined));\n    }\n    getBook(id) {\n      return this.http.get(`${this.url}/${id}`).pipe(catchError(err => of(undefined)),\n      // 401 UnAuthorize\n      map(res => res === null || res === void 0 ? void 0 : res.data));\n    }\n    insertBook(book) {\n      return this.http.post(`${this.url}`, book);\n    }\n    updateBook(id, book) {\n      return this.http.put(`${this.url}/${id}`, book);\n    }\n    deleteBook(id) {\n      return this.http.delete(`${this.url}/${id}`);\n    }\n    findByTitle(id, title) {\n      return this.http.get(`${this.url}/findByTitle?id=${id || ''}&title=${title}`).pipe(map(res => res.data));\n    }\n  }\n  BooksService.ɵfac = function BooksService_Factory(t) {\n    return new (t || BooksService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  BooksService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BooksService,\n    factory: BooksService.ɵfac,\n    providedIn: 'root'\n  });\n  return BooksService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}