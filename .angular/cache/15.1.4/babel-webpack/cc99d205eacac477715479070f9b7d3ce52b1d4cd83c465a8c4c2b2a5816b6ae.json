{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { environment } from './../../environments/environment';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@ionic/storage\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, storage) {\n      this.http = http;\n      this.router = router;\n      this.storage = storage;\n      this.url = `${environment.host}/account`;\n    }\n    login(login) {\n      return this.http.post(`${this.url}/login`, login).pipe(tap(resp => __awaiter(this, void 0, void 0, function* () {\n        yield this.storage.set(environment.tokenName, resp.token);\n        yield this.storage.set('user', resp.userDetails);\n      })));\n    }\n    register(user) {\n      user.enabled = true;\n      return this.http.post(`${this.url}/register`, user).pipe(tap(resp => __awaiter(this, void 0, void 0, function* () {\n        yield this.storage.set(environment.tokenName, resp.token);\n        yield this.storage.set('user', resp.userDetails);\n      })));\n    }\n    /*validateToken(): Observable<User>{\r\n      return this.http.get(`${ this.url }`).pipe(\r\n        retry(2),\r\n        catchError(err => { // 401 Unauthorized\r\n          return of(undefined);\r\n        })\r\n      );\r\n    }*/\n    updateToken(user) {\n      // Renovar el token\n      return this.http.post(`${this.url}/login`, user) // aunque solo se usará el email y password\n      .pipe(tap(resp => __awaiter(this, void 0, void 0, function* () {\n        yield this.storage.set(environment.tokenName, resp.token);\n        yield this.storage.set('user', resp.userDetails);\n      })));\n    }\n    getCurrentUserAsync() {\n      return this.storage.get('user');\n    }\n    logOut() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.storage.remove(environment.tokenName);\n        this.router.navigateByUrl('/login');\n      });\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Storage));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}